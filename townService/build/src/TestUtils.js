import { mock, mockDeep } from 'jest-mock-extended';
import { nanoid } from 'nanoid';
import Player from './lib/Player';
export function createConversationForTesting(params) {
    return {
        id: params?.conversationID || nanoid(),
        occupantsByID: [],
        topic: params?.conversationTopic || nanoid(),
    };
}
export function defaultLocation() {
    return { x: 0, y: 0, moving: false, rotation: 'front', interactableID: undefined };
}
export function clearEmittedEvents(mockEmitter, eventName) {
    if (!eventName) {
        mockEmitter.emit.mock.calls = [];
    }
    else {
        mockEmitter.emit.mock.calls = mockEmitter.emit.mock.calls.filter(eachCall => eachCall[0] !== eventName);
    }
}
export function getLastEmittedEvent(emitter, eventName, howFarBack = 0) {
    const { calls } = emitter.emit.mock;
    let nCallsToSkip = howFarBack;
    for (let i = calls.length - 1; i >= 0; i--) {
        if (calls[i][0] === eventName) {
            if (nCallsToSkip === 0) {
                const param = calls[i][1];
                return param;
            }
            nCallsToSkip--;
        }
    }
    throw new Error(`No ${eventName} could be found as emitted on this socket`);
}
export function extractSessionToken(player) {
    return getLastEmittedEvent(player.socket, 'initialize').sessionToken;
}
export function getEventListener(mockSocket, eventName) {
    const ret = mockSocket.on.mock.calls.find(eachCall => eachCall[0] === eventName);
    if (ret) {
        const param = ret[1];
        if (param) {
            return param;
        }
    }
    throw new Error(`No event listener found for event ${eventName}`);
}
export class MockedPlayer {
    socket;
    socketToRoomMock;
    userName;
    townID;
    player;
    constructor(socket, socketToRoomMock, userName, townID, player) {
        this.socket = socket;
        this.socketToRoomMock = socketToRoomMock;
        this.userName = userName;
        this.townID = townID;
        this.player = player;
    }
    moveTo(x, y, rotation = 'front', moving = false) {
        const onMovementListener = getEventListener(this.socket, 'playerMovement');
        onMovementListener({ x, y, rotation, moving });
    }
}
export function mockPlayer(townID) {
    const socket = mockDeep();
    const userName = nanoid();
    socket.handshake.auth = { userName, townID };
    const socketToRoomMock = mock();
    socket.to.mockImplementation((room) => {
        if (townID === room) {
            return socketToRoomMock;
        }
        throw new Error(`Tried to broadcast to ${room} but this player is in ${townID}`);
    });
    return new MockedPlayer(socket, socketToRoomMock, userName, townID, undefined);
}
export function createPlayerForTesting() {
    return new Player(`username${nanoid()}`, mock());
}
export function expectArraysToContainSameMembers(actual, expected) {
    expect(actual.length).toBe(expected.length);
    expected.forEach(expectedVal => expect(actual.find(actualVal => actualVal === expectedVal)).toBeDefined());
}
export function isViewingArea(interactable) {
    return 'isPlaying' in interactable;
}
export function isConversationArea(interactable) {
    return 'topic' in interactable;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVzdFV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL1Rlc3RVdGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBYSxNQUFNLG9CQUFvQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFTaEMsT0FBTyxNQUFNLE1BQU0sY0FBYyxDQUFDO0FBb0JsQyxNQUFNLFVBQVUsNEJBQTRCLENBQUMsTUFJNUM7SUFDQyxPQUFPO1FBQ0wsRUFBRSxFQUFFLE1BQU0sRUFBRSxjQUFjLElBQUksTUFBTSxFQUFFO1FBQ3RDLGFBQWEsRUFBRSxFQUFFO1FBQ2pCLEtBQUssRUFBRSxNQUFNLEVBQUUsaUJBQWlCLElBQUksTUFBTSxFQUFFO0tBQzdDLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLGVBQWU7SUFDN0IsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSxDQUFDO0FBQ3JGLENBQUM7QUFZRCxNQUFNLFVBQVUsa0JBQWtCLENBQ2hDLFdBQW1FLEVBQ25FLFNBQWM7SUFFZCxJQUFJLENBQUMsU0FBUyxFQUFFO1FBQ2QsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztLQUNsQztTQUFNO1FBQ0wsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQzlELFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLFNBQVMsQ0FDdEMsQ0FBQztLQUNIO0FBQ0gsQ0FBQztBQVNELE1BQU0sVUFBVSxtQkFBbUIsQ0FD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